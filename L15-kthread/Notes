kernel thread related functions are present in linux/kthread.h

struct task_struct * kthread_create (int (* threadfn(void *data), void *data, const char namefmt[], ...); = to create thread
This helper function creates and names a kernel thread. But we need to wake up that thread manually. When woken, the thread will run threadfn() with data as its argument.

threadfn can either call do_exit directly if it is a standalone thread for which no one will call kthread_stop, or return when ‘kthread_should_stop‘ is true (which means kthread_stop has been called). The return value should be zero or a negative error number; it will be passed to kthread_stop.

It Returns task_struct or ERR_PTR(-ENOMEM).


int wake_up_process (struct task_struct * p); - to wake up a thread

int kthread_stop ( struct task_struct *k); - to signal a thread to stop

void kthread_bind (struct task_struct *k, unsigned int cpu); - This is used to bind a just-created kthread to a CPU

int kthread_should_stop (void); - this can be called in a kthread periodically to check whether a stop signal is received

kthread_run (threadfn, data, namefmt, ...); - This is used to create and wake a thread.




Test -

    Build the driver by using Makefile (sudo make)
    Load the driver using sudo insmod driver.ko
    Then Check the dmesg

Major = 246 Minor = 0
Device Driver Insert...Done!!!
In EmbeTronicX Thread Function 0
In EmbeTronicX Thread Function 1
In EmbeTronicX Thread Function 2
In EmbeTronicX Thread Function 3

    So our thread is running now.
    Remove the driver using sudo rmmod driver to stop the thread.