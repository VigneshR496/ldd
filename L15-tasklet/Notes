Tasklet is another bottom half mechanism used in irq handler

Tasklets are atomic, so we cannot use sleep() and such synchronization primitives as mutexes, semaphores, etc. from them. But we can use spinlock.
A tasklet only runs on the same core (CPU) that schedules it.
Different tasklets can be running in parallel. But at the same time, a tasklet cannot be called concurrently with itself, as it runs on one CPU only.
Tasklets are executed by the principle of non-preemptive scheduling, one by one, in turn. We can schedule them with two different priorities: normal and high.

Tasklet structure

struct tasklet_struct
{
    struct tasklet_struct *next;  
    unsigned long state;         
    atomic_t count;               
    void (*func)(unsigned long); 
    unsigned long data;           
};

next : The next tasklet in line for scheduling.
state : This state denotes Tasklet’s State. TASKLET_STATE_SCHED (Scheduled) or TASKLET_STATE_RUN (Running).
count : It holds a nonzero value if the tasklet is disabled and 0 if it is enabled.
func : This is the main function of the tasklet. Pointer to the function that needs to schedule for execution at a later time.
data :  Data to be passed to the function “func“.

DECLARE_TASKLET(name, func, data); - macro to create tasklet


The tasklet can be declared and set at a disabled state, which means that the tasklet can be scheduled, but will not run until the tasklet is specifically enabled. You need to use tasklet_enable to enable.
DECLARE_TASKLET_DISABLED(name, func, data);

void tasklet_enable(struct); - to enable tasklet
void tasklet_disable(struct tasklet_struct *t); - to disable tasklet after waiting for completion of tasklet's operation
void tasklet_disable_nosync(struct tasklet_struct *t); - to disable tasklet immediately

void tasklet_schedule (struct tasklet_struct *t); - to schedule a tasklet, if already scheduled discard silently
void tasklet_hi_schedule (struct tasklet_struct *t); - to schedule a tasklet with high priority, if already scheduled discard silently

void tasklet_hi_schedule_first(struct tasklet_struct *t);
This version avoids touching any other tasklets. Needed for kmemcheck in order not to take any page faults while enqueueing this tasklet. Consider VERY carefully whether you really need this or tasklet_hi_schedule().

void tasklet_kill( struct tasklet_struct *t ); - to kill tasklet after waiting for completion
void tasklet_kill_immediate( struct tasklet_struct *t, unsigned int cpu ); - kill immediate, only used when cpu is in dead state

Test:

Load the driver using sudo insmod driver.ko
To trigger the interrupt read device file (sudo cat /dev/etx_device)
Now see the Dmesg (dmesg)

inux@embetronicx-VirtualBox: dmesg
[ 8592.698763] Major = 246 Minor = 0
[ 8592.703380] Device Driver Insert...Done!!!
[ 8601.716673] Device File Opened...!!!
[ 8601.716697] Read function
[ 8601.716727] Shared IRQ: Interrupt Occurred
[ 8601.716732] Executing Tasklet Function : arg = 1
[ 8601.716741] Device File Closed...!!!                                            
[ 8603.916741] Device Driver Remove...Done!!!

We can able to see the print “Shared IRQ: Interrupt Occurred“ and “Executing Tasklet Function: arg = 1“
Unload the module using sudo rmmod driver