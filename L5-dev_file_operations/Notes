struct inode is used by kernel to represent files
struct cdev is one of the elements of inode structure, it is used to represent character devices.

struct cdev { 
    struct kobject kobj; 
    struct module *owner; 
    const struct file_operations *ops; 
    struct list_head list; 
    dev_t dev; 
    unsigned int count; 
}; this is the cdev structure

struct cdev *my_cdev = cdev_alloc( );
my_cdev->ops = &my_fops; - to obtain a standlone cdev structure during runtime

void cdev_init(struct cdev *cdev, struct file_operations *fops); - to embed cdev structure with a device specific structure of our own

int cdev_add(struct cdev *dev, dev_t num, unsigned int count); - to inform kernel and bring the device alive

struct file_operations {
    struct module *owner;
    loff_t (*llseek) (struct file *, loff_t, int);
    ssize_t (*read) (struct file *, char __user *, size_t, loff_t *);
    ssize_t (*write) (struct file *, const char __user *, size_t, loff_t *);
    ssize_t (*read_iter) (struct kiocb *, struct iov_iter *);
    ssize_t (*write_iter) (struct kiocb *, struct iov_iter *);
    int (*iterate) (struct file *, struct dir_context *);
    int (*iterate_shared) (struct file *, struct dir_context *);
    unsigned int (*poll) (struct file *, struct poll_table_struct *);
    long (*unlocked_ioctl) (struct file *, unsigned int, unsigned long);
    long (*compat_ioctl) (struct file *, unsigned int, unsigned long);
    int (*mmap) (struct file *, struct vm_area_struct *);
    int (*open) (struct inode *, struct file *);
    int (*flush) (struct file *, fl_owner_t id);
    int (*release) (struct inode *, struct file *);
    int (*fsync) (struct file *, loff_t, loff_t, int datasync);
    int (*fasync) (int, struct file *, int);
    int (*lock) (struct file *, int, struct file_lock *);
    ssize_t (*sendpage) (struct file *, struct page *, int, size_t, loff_t *, int);
    unsigned long (*get_unmapped_area)(struct file *, unsigned long, unsigned long, unsigned long, unsigned long);
    int (*check_flags)(int);
    int (*flock) (struct file *, int, struct file_lock *);
    ssize_t (*splice_write)(struct pipe_inode_info *, struct file *, loff_t *, size_t, unsigned int);
    ssize_t (*splice_read)(struct file *, loff_t *, struct pipe_inode_info *, size_t, unsigned int);
    int (*setlease)(struct file *, long, struct file_lock **, void **);
    long (*fallocate)(struct file *file, int mode, loff_t offset,
              loff_t len);
    void (*show_fdinfo)(struct seq_file *m, struct file *f);
#ifndef CONFIG_MMU
    unsigned (*mmap_capabilities)(struct file *);
#endif
    ssize_t (*copy_file_range)(struct file *, loff_t, struct file *,
            loff_t, size_t, unsigned int);
    int (*clone_file_range)(struct file *, loff_t, struct file *, loff_t,
            u64);
    ssize_t (*dedupe_file_range)(struct file *, u64, u64, struct file *,
            u64);
};


the file_operations structure a.k.a fops, the char device uses file operations structure to setup the connection


some elements within the structure is explained below

read - to read data from device
ssize_t (*read) (struct file *, char _ _user *, size_t, loff_t *);

write - to write data to device
ssize_t (*write) (struct file *, const char _ _user *, size_t, loff_t *);

ioctl - to issue device-specific commands
int (*ioctl) (struct inode *, struct file *, unsigned int, unsigned long);

open - can be used to initialise or can be NULL
int (*open) (struct inode *, struct file *);

close - invoked when the when the file structure is released, can be NULL
int (*release) (struct inode *, struct file *);


sudo cat /dev/my_device 
[  136.699038] Device Driver Inserted Successfully...
[  146.773724] Driver Open function called.
[  146.773847] Driver Read Function Called...!!!
[  146.773938] Driver release function called.

sudo sh -c "echo 1 > /dev/my_device"
[  247.966541] Driver Open function called.
[  247.969017] Driver Write Function Called...!!!
[  247.969056] Driver release function called.