Sysfs is a virtual filesystem exported by the kernel, similar to /proc.
The files in Sysfs contain information about devices and drivers.
Some files in Sysfs are even writable, for configuration and control of devices attached to the system.

struct kobject {
    char *k_name;
    char name[KOBJ_NAME_LEN];
    struct kref kref;
    struct list_head entry;
    struct kobject *parent;
    struct kset *kset;
    struct kobj_type *ktype;
    struct dentry *dentry;
   };

the kernel object binds the sysfs and kernel together


Steps involved in creating and using sysfs
   Create a directory in /sys/
   Create sysfs file

To create a directory under /sys
struct kobject * kobject_create_and_add ( const char * name, struct kobject * parent);

second param - folder
kernel_kobj - /sys/kernel/
firmware_kobj - /sys/firmware/
fs_kobj - /sys/fs/
NULL - /sys/


To create a file under /sys/

Attributes are represented as regular files in sysfs with one value per file.
struct kobj_attribute {
    struct attribute attr;
    ssize_t (*show)(struct kobject *kobj, struct kobj_attribute *attr, char *buf);
    ssize_t (*store)(struct kobject *kobj, struct kobj_attribute *attr, const char *buf, size_t count);
   };


To create a attribute the following macro is used
__ATTR(name, permission, show_ptr, store_ptr);

To create a file attribute
int sysfs_create_file ( struct kobject *  kobj, const struct attribute * attr);

To remove a file attribute
void sysfs_remove_file ( struct kobject *  kobj, const struct attribute * attr);

kobject_get and kobject_put are used to increment and decrement the reference of kernel object.


debian@BeagleBone:~/device_drivers/L10-sysfs$ sudo insmod sysfs_tutorial.ko 
debian@BeagleBone:~/device_drivers/L10-sysfs$ sudo sh -c "echo 13 >  /sys/kernel/eg_sysfs/eg_val"
debian@BeagleBone:~/device_drivers/L10-sysfs$ sudo cat /sys/kernel/eg_sysfs/eg_val 
13
dmesg
[ 3908.531350] Device Driver Inserted Successfully...
[ 3911.440313] Sysfs - Write!!!
[ 3914.117895] Sysfs - Read!!!
